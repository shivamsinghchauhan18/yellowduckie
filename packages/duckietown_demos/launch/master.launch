<launch>
	<arg name="veh" default="$(env VEHICLE_NAME)"/>
	<arg name="param_file_name" default="default"/>
	<arg name="line_detector_param_file_name" default="$(arg param_file_name)"/>
	<arg name="robot_type" default="$(env ROBOT_TYPE)"/>
	<arg name="robot_configuration" default="$(env ROBOT_CONFIGURATION)"/>
	<arg name="demo_name" default="lane_following"/>
	<arg name="config" default="baseline"/>
	<arg name="camera_topic" default="camera_node"/>
	<arg name="apriltags_param_file_name" default="$(arg param_file_name)"/>
	<arg name="verbose" default="false"/>
	<arg name="ai_trafo_mode" default="cb"/>
	<arg name="ai_interval" default="5"/>
	<arg name="intersectionType" default="stopSign"/>
    <arg name="use_ml_lane" default="false"/>
    <arg name="onnx_model_path" default="/assets/nn_models/lane_following.onnx"/>
	<arg name="use_adaptive_speed" default="false"/>

	<!-- Roboflow A/B toggles -->
	<arg name="use_roboflow_det" default="false"/>
	<arg name="roboflow_api_key" default="$(env ROBOFLOW_API_KEY)"/>
	<arg name="roboflow_model_id" default="object-detection-dataset-ywlek/1"/>

	<group ns="$(arg veh)">
		<!-- Camera -->
		<include file="$(find duckiebot_interface)/launch/camera_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<!-- Anti Instagram -->
		<remap from="anti_instagram_node/uncorrected_image/compressed" to="camera_node/image/compressed"/>
		<include file="$(find anti_instagram)/launch/anti_instagram_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<!-- Line Detector -->
		<remap from="line_detector_node/thresholds" to="anti_instagram_node/thresholds"/>
		<remap from="line_detector_node/image/compressed" to="camera_node/image/compressed"/>
		<include file="$(find line_detector)/launch/line_detector_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="param_file_name" value="$(arg line_detector_param_file_name)"/>
		</include>

		<!-- Ground Projection -->
		<remap from="~lineseglist_in" to="line_detector_node/segment_list"/>
		<remap from="~cali_image" to="$(arg camera_topic)/image/raw"/>
		<remap from="~camera_info" to="$(arg camera_topic)/camera_info"/>
		<include file="$(find ground_projection)/launch/ground_projection_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<!-- Lane Filter -->
		<remap from="lane_filter_node/segment_list" to="ground_projection_node/lineseglist_out"/>
		<remap from="lane_filter_node/car_cmd" to="car_cmd_switch_node/cmd"/>
		<include file="$(find lane_filter)/launch/lane_filter_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<!-- Stop Line Filter -->
		<remap from="stop_line_filter_node/lanewidth" to="lane_filter_node/lanewidth"/>
		<group unless="$(arg use_ml_lane)">
		  <remap from="stop_line_filter_node/lane_pose" to="lane_filter_node/lane_pose"/>
		</group>
		<group if="$(arg use_ml_lane)">
		  <remap from="stop_line_filter_node/lane_pose" to="lane_following_ml_node/lane_pose"/>
		</group>
		<remap from="stop_line_filter_node/segment_list" to="ground_projection_node/lineseglist_out"/>
		<include file="$(find stop_line_filter)/launch/stop_line_filter_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

        <!-- Lane Following ML -->
        <group if="$(arg use_ml_lane)">
        <include file="$(find lane_following_ml)/launch/lane_following_onnx_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="onnx_model_path" value="$(arg onnx_model_path)"/>
         <arg name="input_size" value="416"/>
         <arg name="postprocess_mode" value="seg_centerline"/>
         <arg name="fov_deg" value="80.0"/>
         <arg name="meters_per_pixel" value="0.0020"/>
         <arg name="invert_d" value="false"/>
         <arg name="invert_phi" value="false"/>
         <arg name="ema_alpha" value="0.6"/>
         <arg name="publish_rate_hz" value="15.0"/>
       </include>
       </group>
        

		<!-- Lane Controller (default: classical lane filter) -->
       <group unless="$(arg use_ml_lane)">
       <remap from="lane_controller_node/lane_pose" to="lane_filter_node/lane_pose"/>
       <remap from="lane_controller_node/wheels_cmd" to="wheels_driver_node/wheels_cmd_executed"/>
       <remap from="lane_controller_node/obstacle_distance_reading" to="vehicle_filter_node/virtual_stop_line"/>
       <remap from="lane_controller_node/stop_line_reading" to="stop_line_filter_node/stop_line_reading"/>
       <include file="$(find lane_control)/launch/lane_controller_node.launch">
       <arg name="veh" value="$(arg veh)"/>
       <arg name="param_file_name" value="$(arg param_file_name)"/>
      </include>
      </group>

      <!-- Lane Controller (ML lane pose) -->
      <group if="$(arg use_ml_lane)">
      <!-- Remap the controller's private input to the ML node's output -->
      <remap from="lane_controller_node/lane_pose" to="lane_following_ml_node/lane_pose"/>
      <remap from="lane_controller_node/wheels_cmd" to="wheels_driver_node/wheels_cmd_executed"/>
      <remap from="lane_controller_node/obstacle_distance_reading" to="vehicle_filter_node/virtual_stop_line"/>
      <remap from="lane_controller_node/stop_line_reading" to="stop_line_filter_node/stop_line_reading"/>
      <include file="$(find lane_control)/launch/lane_controller_node.launch">
      <arg name="veh" value="$(arg veh)"/>
      <arg name="param_file_name" value="$(arg param_file_name)"/>
      </include>
      </group>

		<!-- Perception Data Fusion -->
		<!-- Default: classical lane pose from lane_filter_node -->
		<group unless="$(arg use_ml_lane)">
			<remap from="~lane_pose" to="lane_filter_node/lane_pose"/>
			<remap from="~enhanced_detections" to="object_detection_node/detections"/>
			<include file="$(find predictive_perception)/launch/perception_data_fusion_node.launch">
				<arg name="veh" value="$(arg veh)"/>
			</include>
		</group>

		<!-- ML: consume lane pose from lane_following_ml_node -->
		<group if="$(arg use_ml_lane)">
			<remap from="~lane_pose" to="lane_following_ml_node/lane_pose"/>
			<remap from="~enhanced_detections" to="object_detection_node/detections"/>
			<include file="$(find predictive_perception)/launch/perception_data_fusion_node.launch">
				<arg name="veh" value="$(arg veh)"/>
			</include>
		</group>

		<!-- Collision Detection Manager -->
		<!-- Default: classical lane pose from lane_filter_node -->
		<group unless="$(arg use_ml_lane)">
		  <remap from="~lane_pose" to="lane_filter_node/lane_pose"/>
		  <remap from="~vehicle_detections" to="vehicle_detection_node/detections"/>
		  <remap from="~object_detections" to="object_detection_node/detections"/>
		  <remap from="~car_cmd" to="car_cmd_switch_node/cmd"/>
		  <include file="$(find safety_system)/launch/collision_detection_manager_node.launch">
		    <arg name="veh" value="$(arg veh)"/>
		  </include>
		</group>

		<!-- ML: consume lane pose from lane_following_ml_node -->
		<group if="$(arg use_ml_lane)">
		  <remap from="~lane_pose" to="lane_following_ml_node/lane_pose"/>
		  <remap from="~vehicle_detections" to="vehicle_detection_node/detections"/>
		  <remap from="~object_detections" to="object_detection_node/detections"/>
		  <remap from="~car_cmd" to="car_cmd_switch_node/cmd"/>
		  <include file="$(find safety_system)/launch/collision_detection_manager_node.launch">
		    <arg name="veh" value="$(arg veh)"/>
		  </include>
		</group>

		<!-- Adaptive Speed Control (A/B toggle) -->
		<group if="$(arg use_adaptive_speed)">
			<include file="$(find adaptive_speed_control)/launch/adaptive_speed_controller_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
				<arg name="verbose" value="$(arg verbose)"/>
			</include>
		</group>

		<!-- Route adaptive speed into the command switch when enabled -->
		<group if="$(arg use_adaptive_speed)">
			<remap from="/$(arg veh)/car_cmd_switch_node/cmd"
			       to="/$(arg veh)/adaptive_speed_controller_node/car_cmd"/>
		</group>

		<!-- Roboflow Object Detection (A/B) -->
		<group if="$(arg use_roboflow_det)">
		  <include file="$(find object_detection)/launch/roboflow_object_detection_node.launch">
		    <arg name="veh" value="$(arg veh)"/>
		    <arg name="api_key" value="$(arg roboflow_api_key)"/>
		    <arg name="model_id" value="$(arg roboflow_model_id)"/>
		  </include>
		</group>

		<!-- Override enhanced detections to Roboflow when enabled -->
		<group if="$(arg use_roboflow_det)">
		  <remap from="/$(arg veh)/enhanced_object_detection_node/enhanced_detections"
		         to="/$(arg veh)/roboflow_object_detection_node/enhanced_detections"/>
		</group>

		<!-- Object Detection -->
		<remap from="object_detection_node/image/compressed" to="camera_node/image/compressed"/>
		<include file="$(find object_detection)/launch/object_detection_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<!-- Vehicle Avoidance -->
		<remap from="vehicle_detection_node/image" to="camera_node/image/compressed"/>
		<include file="$(find vehicle_detection)/launch/vehicle_detection_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<remap from="vehicle_filter_node/camera_info" to="camera_node/camera_info"/>
		<remap from="vehicle_filter_node/centers" to="vehicle_detection_node/centers"/>
		<include file="$(find vehicle_detection)/launch/vehicle_filter_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<!-- LED -->
		<include file="$(find led_emitter)/launch/led_emitter_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<remap from="led_pattern_switch_node/set_pattern" to="led_emitter_node/set_pattern"/>
		<include file="$(find led_pattern_switch)/launch/led_pattern_switch_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<!-- AprilTags -->
		<remap from="apriltag_detector_node/image" to="camera_node/image/compressed"/>
		<remap from="apriltag_detector_node/camera_info" to="camera_node/camera_info"/>
		<include file="$(find apriltag)/launch/apriltag_detector_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<remap from="apriltag_postprocessing_node/detections" to="apriltag_detector_node/detections"/>
		<include file="$(find apriltag)/launch/apriltag_postprocessing_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>
	</group>
</launch>